/* Generated by the Nim Compiler v1.6.2 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI33555130 = {
  size: 0,
  kind: 17,
  base: null,
  node: null,
  finalizer: null,
};
var NTI33555083 = {
  size: 0,
  kind: 17,
  base: null,
  node: null,
  finalizer: null,
};
var NTI33555165 = {
  size: 0,
  kind: 22,
  base: null,
  node: null,
  finalizer: null,
};
var NTI33554439 = {
  size: 0,
  kind: 28,
  base: null,
  node: null,
  finalizer: null,
};
var NTI33555164 = {
  size: 0,
  kind: 22,
  base: null,
  node: null,
  finalizer: null,
};
var NTI33555112 = {
  size: 0,
  kind: 17,
  base: null,
  node: null,
  finalizer: null,
};
var NTI33555113 = {
  size: 0,
  kind: 17,
  base: null,
  node: null,
  finalizer: null,
};
var NTI33555120 = {
  size: 0,
  kind: 17,
  base: null,
  node: null,
  finalizer: null,
};
var NTI33555122 = {
  size: 0,
  kind: 17,
  base: null,
  node: null,
  finalizer: null,
};
var NTI33554440 = {
  size: 0,
  kind: 29,
  base: null,
  node: null,
  finalizer: null,
};
var NTI469762075 = {
  size: 0,
  kind: 24,
  base: null,
  node: null,
  finalizer: null,
};
NTI469762075.base = NTI33554440;
var NNI33555122 = {
  kind: 2,
  len: 0,
  offset: 0,
  typ: null,
  name: null,
  sons: [],
};
NTI33555122.node = NNI33555122;
var NNI33555120 = {
  kind: 2,
  len: 0,
  offset: 0,
  typ: null,
  name: null,
  sons: [],
};
NTI33555120.node = NNI33555120;
var NNI33555113 = {
  kind: 2,
  len: 0,
  offset: 0,
  typ: null,
  name: null,
  sons: [],
};
NTI33555113.node = NNI33555113;
NTI33555164.base = NTI33555112;
NTI33555165.base = NTI33555112;
var NNI33555112 = {
  kind: 2,
  len: 5,
  offset: 0,
  typ: null,
  name: null,
  sons: [
    {
      kind: 1,
      offset: "parent",
      len: 0,
      typ: NTI33555164,
      name: "parent",
      sons: null,
    },
    {
      kind: 1,
      offset: "name",
      len: 0,
      typ: NTI33554440,
      name: "name",
      sons: null,
    },
    {
      kind: 1,
      offset: "message",
      len: 0,
      typ: NTI33554439,
      name: "msg",
      sons: null,
    },
    {
      kind: 1,
      offset: "trace",
      len: 0,
      typ: NTI33554439,
      name: "trace",
      sons: null,
    },
    { kind: 1, offset: "up", len: 0, typ: NTI33555165, name: "up", sons: null },
  ],
};
NTI33555112.node = NNI33555112;
var NNI33555083 = {
  kind: 2,
  len: 0,
  offset: 0,
  typ: null,
  name: null,
  sons: [],
};
NTI33555083.node = NNI33555083;
NTI33555112.base = NTI33555083;
NTI33555113.base = NTI33555112;
NTI33555120.base = NTI33555113;
NTI33555122.base = NTI33555120;
var NNI33555130 = {
  kind: 2,
  len: 0,
  offset: 0,
  typ: null,
  name: null,
  sons: [],
};
NTI33555130.node = NNI33555130;
NTI33555130.base = NTI33555113;

function setConstr() {
  var result = {};
  for (var i = 0; i < arguments.length; ++i) {
    var x = arguments[i];
    if (typeof x == "object") {
      for (var j = x[0]; j <= x[1]; ++j) {
        result[j] = true;
      }
    } else {
      result[x] = true;
    }
  }
  return result;
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_33557141, src_33557142, ti_33557143) {
  var result_33557152 = null;

  switch (ti_33557143.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!isFatPointer_33557132(ti_33557143)) {
        result_33557152 = src_33557142;
      } else {
        result_33557152 = [src_33557142[0], src_33557142[1]];
      }

      break;
    case 19:
      if (dest_33557141 === null || dest_33557141 === undefined) {
        dest_33557141 = {};
      } else {
        for (var key in dest_33557141) {
          delete dest_33557141[key];
        }
      }
      for (var key in src_33557142) {
        dest_33557141[key] = src_33557142[key];
      }
      result_33557152 = dest_33557141;

      break;
    case 18:
    case 17:
      if (!(ti_33557143.base == null)) {
        result_33557152 = nimCopy(
          dest_33557141,
          src_33557142,
          ti_33557143.base
        );
      } else {
        if (ti_33557143.kind == 17) {
          result_33557152 =
            dest_33557141 === null || dest_33557141 === undefined
              ? { m_type: ti_33557143 }
              : dest_33557141;
        } else {
          result_33557152 =
            dest_33557141 === null || dest_33557141 === undefined
              ? {}
              : dest_33557141;
        }
      }
      nimCopyAux(result_33557152, src_33557142, ti_33557143.node);
      break;
    case 24:
    case 4:
    case 27:
    case 16:
      if (src_33557142 === null) {
        result_33557152 = null;
      } else {
        if (
          dest_33557141 === null ||
          dest_33557141 === undefined ||
          dest_33557141.length != src_33557142.length
        ) {
          dest_33557141 = new Array(src_33557142.length);
        }
        result_33557152 = dest_33557141;
        for (var i = 0; i < src_33557142.length; ++i) {
          result_33557152[i] = nimCopy(
            result_33557152[i],
            src_33557142[i],
            ti_33557143.base
          );
        }
      }

      break;
    case 28:
      if (src_33557142 !== null) {
        result_33557152 = src_33557142.slice(0);
      }

      break;
    default:
      result_33557152 = src_33557142;
      break;
  }

  return result_33557152;
}

function makeNimstrLit(c_33556802) {
  var result = [];
  for (var i = 0; i < c_33556802.length; ++i) {
    result[i] = c_33556802.charCodeAt(i);
  }
  return result;
}

function toJSStr(s_33556808) {
  var Temporary5;
  var Temporary7;

  var result_33556809 = null;

  var res_33556843 = newSeq_33556826(s_33556808.length);
  var i_33556844 = 0;
  var j_33556845 = 0;
  Label1: do {
    Label2: while (true) {
      if (!(i_33556844 < s_33556808.length)) break Label2;
      var c_33556846 = s_33556808[i_33556844];
      if (c_33556846 < 128) {
        res_33556843[j_33556845] = String.fromCharCode(c_33556846);
        i_33556844 += 1;
      } else {
        var helper_33556858 = newSeq_33556826(0);
        Label3: do {
          Label4: while (true) {
            if (!true) break Label4;
            var code_33556859 = c_33556846.toString(16);
            if ((code_33556859 == null ? 0 : code_33556859.length) == 1) {
              helper_33556858.push("%0");
            } else {
              helper_33556858.push("%");
            }

            helper_33556858.push(code_33556859);
            i_33556844 += 1;
            if (s_33556808.length <= i_33556844) Temporary5 = true;
            else {
              Temporary5 = s_33556808[i_33556844] < 128;
            }
            if (Temporary5) {
              break Label3;
            }

            c_33556846 = s_33556808[i_33556844];
          }
        } while (false);
        ++excHandler;
        Temporary7 = framePtr;
        try {
          res_33556843[j_33556845] = decodeURIComponent(
            helper_33556858.join("")
          );
          --excHandler;
        } catch (EXCEPTION) {
          var prevJSError = lastJSError;
          lastJSError = EXCEPTION;
          --excHandler;
          framePtr = Temporary7;
          res_33556843[j_33556845] = helper_33556858.join("");
          lastJSError = prevJSError;
        } finally {
          framePtr = Temporary7;
        }
      }

      j_33556845 += 1;
    }
  } while (false);
  if (res_33556843.length < j_33556845) {
    for (var i = res_33556843.length; i < j_33556845; ++i)
      res_33556843.push(null);
  } else {
    res_33556843.length = j_33556845;
  }
  result_33556809 = res_33556843.join("");

  return result_33556809;
}

function raiseException(e_33556668, ename_33556669) {
  e_33556668.name = ename_33556669;
  if (excHandler == 0) {
    unhandledException(e_33556668);
  }

  throw e_33556668;
}

function subInt(a_33556945, b_33556946) {
  var result = a_33556945 - b_33556946;
  checkOverflowInt(result);
  return result;
}

function chckRange(i_33557190, a_33557191, b_33557192) {
  var Temporary1;

  var result_33557193 = 0;

  BeforeRet: do {
    if (!(a_33557191 <= i_33557190)) Temporary1 = false;
    else {
      Temporary1 = i_33557190 <= b_33557192;
    }
    if (Temporary1) {
      result_33557193 = i_33557190;
      break BeforeRet;
    } else {
      raiseRangeError();
    }
  } while (false);

  return result_33557193;
}
var objectID_671088802 = [0];

function newSeq_33556826(len_33556828) {
  var result_33556829 = [];

  result_33556829 = new Array(len_33556828);
  for (var i = 0; i < len_33556828; ++i) {
    result_33556829[i] = null;
  }
  return result_33556829;
}

function isFatPointer_33557132(ti_33557133) {
  var result_33557134 = false;

  BeforeRet: do {
    result_33557134 = !(ConstSet1[ti_33557133.base.kind] != undefined);
    break BeforeRet;
  } while (false);

  return result_33557134;
}

function nimCopyAux(dest_33557145, src_33557146, n_33557147) {
  switch (n_33557147.kind) {
    case 0:
      break;
    case 1:
      dest_33557145[n_33557147.offset] = nimCopy(
        dest_33557145[n_33557147.offset],
        src_33557146[n_33557147.offset],
        n_33557147.typ
      );

      break;
    case 2:
      for (var i = 0; i < n_33557147.sons.length; i++) {
        nimCopyAux(dest_33557145, src_33557146, n_33557147.sons[i]);
      }

      break;
    case 3:
      dest_33557145[n_33557147.offset] = nimCopy(
        dest_33557145[n_33557147.offset],
        src_33557146[n_33557147.offset],
        n_33557147.typ
      );
      for (var i = 0; i < n_33557147.sons.length; ++i) {
        nimCopyAux(dest_33557145, src_33557146, n_33557147.sons[i][1]);
      }

      break;
  }
}

function nimSetTodo_469762058(todo_469762059) {
  BeforeRet: do {
    if ((todo_469762059 == null ? 0 : todo_469762059.length) == 0) {
      break BeforeRet;
    }

    var todosStorage_469762080 = sessionStorage.getItem("todo");
    var todos_469762088 = newSeq_33556826(0);
    if (!(todosStorage_469762080 == null)) {
      todos_469762088 = nimCopy(
        null,
        JSON.parse(todosStorage_469762080),
        NTI469762075
      );
    }

    todos_469762088.push(todo_469762059);
    sessionStorage.setItem("todo", JSON.stringify(todos_469762088));
  } while (false);
}

function nimLoadTodos_469762140() {
  var Temporary1;

  var result_469762141 = null;

  BeforeRet: do {
    var todosStorage_469762153 = sessionStorage.getItem("todo");
    if (!(todosStorage_469762153 == null)) {
      Temporary1 = JSON.parse(todosStorage_469762153);
    } else {
      Temporary1 = newSeq_33556826(0);
    }

    var todos_469762179 = nimCopy(null, Temporary1, NTI469762075);
    result_469762141 = todos_469762179;
    break BeforeRet;
  } while (false);

  return result_469762141;
}

function add_33556420(x_33556421, x_33556421_Idx, y_33556422) {
  if (x_33556421[x_33556421_Idx] === null) {
    x_33556421[x_33556421_Idx] = [];
  }
  var off = x_33556421[x_33556421_Idx].length;
  x_33556421[x_33556421_Idx].length += y_33556422.length;
  for (var i = 0; i < y_33556422.length; ++i) {
    x_33556421[x_33556421_Idx][off + i] = y_33556422.charCodeAt(i);
  }
}

function unhandledException(e_33556664) {
  var buf_33556665 = [[]];
  if (!(e_33556664.message.length == 0)) {
    buf_33556665[0].push.apply(
      buf_33556665[0],
      makeNimstrLit("Error: unhandled exception: ")
    );
    buf_33556665[0].push.apply(buf_33556665[0], e_33556664.message);
  } else {
    buf_33556665[0].push.apply(
      buf_33556665[0],
      makeNimstrLit("Error: unhandled exception")
    );
  }

  buf_33556665[0].push.apply(buf_33556665[0], makeNimstrLit(" ["));
  add_33556420(buf_33556665, 0, e_33556664.name);
  buf_33556665[0].push.apply(buf_33556665[0], makeNimstrLit("]\x0A"));
  var cbuf_33556666 = toJSStr(buf_33556665[0]);
  framePtr = null;
  if (typeof Error !== "undefined") {
    throw new Error(cbuf_33556666);
  } else {
    throw cbuf_33556666;
  }
}

function raiseOverflow() {
  raiseException(
    {
      message: makeNimstrLit("over- or underflow"),
      parent: null,
      m_type: NTI33555122,
      name: null,
      trace: [],
      up: null,
    },
    "OverflowDefect"
  );
}

function checkOverflowInt(a_33556939) {
  if (a_33556939 > 2147483647 || a_33556939 < -2147483648) raiseOverflow();
}

function delete_469762227(x_469762229, x_469762229_Idx, i_469762230) {
  x_469762229[x_469762229_Idx].splice(i_469762230, 1);
}

function raiseRangeError() {
  raiseException(
    {
      message: makeNimstrLit("value out of range"),
      parent: null,
      m_type: NTI33555130,
      name: null,
      trace: [],
      up: null,
    },
    "RangeDefect"
  );
}

function nimDeleteTodo_469762183(num_469762184) {
  var Temporary1;

  BeforeRet: do {
    var todosStorage_469762196 = sessionStorage.getItem("todo");
    if (!(todosStorage_469762196 == null)) {
      Temporary1 = JSON.parse(todosStorage_469762196);
    } else {
      Temporary1 = newSeq_33556826(0);
    }

    var todos_469762222 = [nimCopy(null, Temporary1, NTI469762075)];
    if (subInt(todos_469762222[0].length, 1) < (num_469762184 | 0)) {
      break BeforeRet;
    }

    delete_469762227(
      todos_469762222,
      0,
      chckRange(num_469762184 | 0, 0, 2147483647)
    );
    sessionStorage.setItem("todo", JSON.stringify(todos_469762222[0]));
  } while (false);
}
module.exports.nimSetTodo = nimSetTodo_469762058;
module.exports.nimLoadTodos = nimLoadTodos_469762140;
module.exports.nimDeleteTodo = nimDeleteTodo_469762183;
